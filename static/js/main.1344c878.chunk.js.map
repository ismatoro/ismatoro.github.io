{"version":3,"sources":["components/footer.jsx","components/header.jsx","components/productItem.jsx","components/productList.jsx","components/productDetail.jsx","pages/ProductPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Footer","className","Header","ProductItem","props","product","to","id","src","alt","name","ProductList","list","products","map","elem","key","ProductDetail","ProductPage","productId","data","find","parseInt","App","basepath","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oqBAaeA,G,MAVA,WACX,OACI,4BAAQC,UAAU,UACd,+BCKGC,EARA,WACX,OACI,4BAAQD,UAAU,UAAlB,cCUOE,EAZK,SAACC,GAAW,IACrBC,EAAWD,EAAXC,QACP,OACI,yBAAKJ,UAAU,gBACX,kBAAC,IAAD,CAAMK,GAAE,mBAAcD,EAAQE,KAC1B,yBAAKN,UAAU,sBAAsBO,IAAG,cAAiBC,IAAKJ,EAAQK,OACtE,0BAAMT,UAAU,sBAAsBI,EAAQK,SCI/CC,EAVK,SAACP,GAAW,IAEtBQ,EADaR,EAAZS,SACeC,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,CAAaC,IAAKD,EAAKR,GAAIF,QAASU,OACxE,OACI,wBAAId,UAAU,gBACTW,I,OCGEK,EATO,SAAC,GAAe,IAAdZ,EAAa,EAAbA,QACpB,OACI,yBAAKJ,UAAU,kBACX,yBAAKA,UAAU,wBAAwBO,IAAG,iBAAoBC,IAAKJ,EAAQK,OAC3E,0BAAMT,UAAU,wBAAwBI,EAAQK,QCO7CQ,EATK,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACdd,EAAUe,EAAKC,MAAK,SAAAhB,GAAO,OAAIA,EAAQE,KAAOe,SAASH,MAC7D,OACE,6BAASlB,UAAU,gBACjB,kBAAC,EAAD,CAAeI,QAASA,MCiBfkB,MAhBf,WACE,IAAMV,EAAWO,EACjB,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,MACA,6BAASA,UAAU,gBACjB,kBAAC,IAAD,CAAQuB,SAAU,IAAKvB,UAAU,qBAC/B,kBAAC,EAAD,CAAawB,KAAK,IAAIZ,SAAUA,IAChC,kBAAC,EAAD,CAAaY,KAAK,yBAGtB,kBAAC,EAAD,QCRcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1344c878.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <p>\n                {/* <label>Email: </label><span>publiarco.toro@gmail.com</span> */}\n            </p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\n\n\nconst Header = () => {\n    return (\n        <header className=\"header\">\n            Publiarco\n        </header>\n    )\n}\n\nexport default Header;","import { Link } from '@reach/router';\nimport React from 'react';\n\nconst ProductItem = (props) => {\n    const {product} = props;\n    return (\n        <div className=\"product-item\">\n            <Link to={`/product/${product.id}`}>\n                <img className=\"product-item__image\" src={`chaleco.jpg`} alt={product.name}/>\n                <span className=\"product-item__name\">{product.name}</span>\n            </Link>\n        </div>\n    )\n}\n\nexport default ProductItem;","import React from 'react';\nimport ProductItem from './productItem';\n\nconst ProductList = (props) => {\n    const {products} = props;\n    const list = products.map((elem) => <ProductItem key={elem.id} product={elem} />)\n    return (\n        <ul className=\"product-list\">\n            {list}\n        </ul>\n    )\n}\n\nexport default ProductList;","import React from 'react';\n\nconst ProductDetail = ({product}) => {\n    return (\n        <div className=\"product-detail\">\n            <img className=\"product-detail__image\" src={`../chaleco.jpg`} alt={product.name}/>\n            <span className=\"product-detail__name\">{product.name}</span>\n        </div>\n    )\n}\n\nexport default ProductDetail;","import React from 'react';\nimport ProductDetail from '../components/productDetail';\nimport data from '../data/products.json';\n\nconst ProductPage = ({productId}) => {\n  const product = data.find(product => product.id === parseInt(productId));\n  return (\n    <section className=\"product-page\">\n      <ProductDetail product={product} />\n    </section>\n  );\n}\n\nexport default ProductPage;\n","import { Router } from '@reach/router';\nimport React from 'react';\nimport './App.scss';\nimport Footer from './components/footer';\nimport Header from './components/header';\nimport ProductList from './components/productList';\nimport data from './data/products.json';\nimport ProductPage from './pages/ProductPage';\n\nfunction App() {\n  const products = data;\n  return (\n    <div className=\"App\">\n      <Header />\n      <section className=\"main-section\">\n        <Router basepath={'/'} className=\"checkout__content\">\n          <ProductList path=\"/\" products={products} />\n          <ProductPage path=\"product/:productId\" />\n        </Router>\n      </section>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}